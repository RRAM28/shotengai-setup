#!/bin/bash

## Make sure only root can run our script
check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root. Please sudo or log in as root first." 1>&2
    exit 1
  fi
}

## Add user Shotengai
#password: shotengai_codeflakes_2021
adduser shotengai
usermod -aG sudo shotengai
passwd -d shotengai_codeflakes_2021

## Install Ruby & Ruby on Rails
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
log_info() {
  printf "\n\e[0;35m $1\e[0m\n\n"
}

if [ ! -f "$HOME/.bashrc" ]; then
  touch $HOME/.bashrc
fi

log_info "Updating Packages ..."
  sudo apt-get update

log_info "Installing Git ..."
  sudo apt-get -y install git

log_info "Installing build essentials ..."
  sudo apt-get -y install build-essential

log_info "Installing libraries for common gem dependencies ..."
  sudo apt-get -y install libxslt1-dev libcurl4-openssl-dev libksba8 libksba-dev libreadline-dev libssl-dev zlib1g-dev libsnappy-dev

log_info "Installing Postgres ..."
  sudo apt-get -y install postgresql postgresql-server-dev-all postgresql-contrib libpq-dev

log_info "Installing curl ..."
  sudo apt-get -y install curl

log_info "Installing ImageMagick ..."
  sudo apt-get -y install libtool
  wget https://raw.githubusercontent.com/discourse/discourse_docker/master/image/base/install-imagemagick
  chmod +x install-imagemagick
  sudo ./install-imagemagick

log_info "Installing image utilities ..."
  sudo apt-get -y install advancecomp gifsicle jpegoptim libjpeg-progs optipng pngcrush pngquant
  sudo apt-get -y install jhead

log_info "Installing make utilities ..."
  apt-get -y install make

if [[ ! -d "$HOME/.rbenv" ]]; then
  log_info "Installing rbenv ..."
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv

    if ! grep -qs "rbenv init" ~/.bashrc; then
      printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.bashrc
      printf 'eval "$(rbenv init - --no-rehash)"\n' >> ~/.bashrc
    fi

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  log_info "Installing ruby-build, to install Rubies ..."
    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
fi

ruby_version="2.7.2"
rails_version="6.0.2"
bundler_version="2.2.15"

log_info "Installing Ruby $ruby_version ..."
  rbenv install "$ruby_version"

log_info "Setting $ruby_version as global default Ruby ..."
  rbenv global $ruby_version
  rbenv rehash

log_info "Updating to latest Rubygems version ..."
  gem update --system

log_info "Installing Rails $rails_version ..."
  gem install rails -v "$rails_version"

log_info "Installing Bundler $bundler_version ..."
  gem install bundler:"$bundler_version"

## Install Docker
check_docker() {
  (which docker || which docker.io) 2>/dev/null
  echo $?
}

check_and_install_docker() {
  found_docker=$(check_docker)
  if [ "$found_docker" -ne 0 ]; then
    echo Failed to find docker or docker.io on your PATH.
    read -p "Enter to install Docker from https://get.docker.com/ or Ctrl+C to exit"
    curl https://get.docker.com/ | sh

    found_docker=$(check_docker)
    if [ "$found_docker" -ne 0 ]; then
      echo Still failed to find docker or docker.io on your PATH.
      echo Docker install failed. Quitting.
      exit
    fi
  fi
}
# avoid typing sudo
sudo usermod -aG docker ${USER}
sudo usermod -aG docker shotengai
