#!/usr/bin/env bash

# Install Shotengai Dependencies

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
log_info() {
  printf "\n\e[0;35m $1\e[0m\n\n"
}

if [ ! -f "$HOME/.bashrc" ]; then
  touch $HOME/.bashrc
fi

log_info "Updating Packages ..."
  sudo apt-get update

log_info "Installing Git ..."
  sudo apt-get -y install git

log_info "Installing build essentials ..."
  sudo apt-get -y install build-essential

log_info "Installing libraries for common gem dependencies ..."
  sudo apt-get -y install libxslt1-dev libcurl4-openssl-dev libksba8 libksba-dev libreadline-dev libssl-dev zlib1g-dev libsnappy-dev

log_info "Installing Postgres ..."
  sudo apt-get -y install postgresql postgresql-server-dev-all postgresql-contrib libpq-dev

log_info "Installing curl ..."
  sudo apt-get -y install curl

log_info "Installing ImageMagick ..."
  sudo apt-get -y install libtool
  wget https://raw.githubusercontent.com/discourse/discourse_docker/master/image/base/install-imagemagick
  chmod +x install-imagemagick
  sudo ./install-imagemagick

log_info "Installing make ..."
  sudo apt-get -y install make

if [[ ! -d "$HOME/.rbenv" ]]; then
  log_info "Installing rbenv ..."
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv

    if ! grep -qs "rbenv init" ~/.bashrc; then
      printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.bashrc
      printf 'eval "$(rbenv init - --no-rehash)"\n' >> ~/.bashrc
      source ~/.bashrc
    fi

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  log_info "Installing ruby-build, to install Rubies ..."
    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
fi

log_info "Installing Ruby 2.7.2 ..."
  rbenv install 2.7.2

log_info "Setting 2.7.2 as global default Ruby ..."
  rbenv global 2.7.2
  rbenv rehash

log_info "Installing Rails 6.0.2 ..."
  gem install rails -v 6.0.2

log_info "Installing Bundler 2.2.15 ..."
  gem install bundler:2.2.15

## Install Docker
if [[ ! -d $(which docker) && $(docker --version) ]]; then
  log_info "Installing Docker ..."
    curl https://get.docker.com/ | sh
fi
# # avoid typing sudo
# sudo usermod -aG docker ${USER}
# sudo usermod -aG docker shotengai

# check_docker() {
#   (which docker || which docker.io) 2>/dev/null
#   echo $?
# }

# check_and_install_docker() {
#   found_docker=$(check_docker)
#   if [ "$found_docker" -ne 0 ]; then
#     echo Failed to find docker or docker.io on your PATH.
#     read -p "Enter to install Docker from https://get.docker.com/ or Ctrl+C to exit"
#     curl https://get.docker.com/ | sh

#     found_docker=$(check_docker)
#     if [ "$found_docker" -ne 0 ]; then
#       echo Still failed to find docker or docker.io on your PATH.
#       echo Docker install failed. Quitting.
#       exit
#     fi
#   fi
# }

# ## Add user Shotengai
# #password: shotengai_codeflakes_2021
# sudo adduser shotengai
# sudo usermod -aG sudo shotengai
# sudo passwd -d shotengai_codeflakes_2021
